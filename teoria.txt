Clases
Definen una forma de organizar datos repetibles, deben usarse para evitar repetir lineas de codigo que hacen referencia a la misma informacion.

Clase Animal {
// Características o Propiedades
   Especie
   Tamaño
   Hábitat
// Podemos agregar tanta propiedades como sea necesario.
/* Comportamientos o métodos */
   Alimentación() {
   }
   Movimiento() {
   }
}

class Animal {
    constructor(especie, tamano, habitat) {
        this.especie = especie;
        this.tamano = tamano;
        this.habitat = habitat;
    }
    alimentacion() {
        console.log("Aqui definimos como se alimenta el animal");
    }
    movimiento() {
        console.log("En este método definimos como se mueve el animal");
    }
}

Esto puede ser aplicado a mas de un animal por eso es funcional y se deja en clase y objetos.

Métodos
- Puede recibir cualquier cantidad de parámetros, puede estar definido sin parámetros, como puede tener uno o mas.
Esa es la forma de pasarle informacion para que podamos reutilizar su funcionalidad en diferentes escenarios.
- Se usan para identificar los comportamientos que tiene nuestra clase.
- El objetivo de los metodos es definir que acciones puede ejecutar un objeto.
El comportamiento es implementado dentro del metodo

dentro de clase 
    //metodo
    depositoEnCuenta(valor){
        //el this se usa para referirnos a esta cuenta, en la que se este actualmente
        this.saldo += valor
    }

    fuera de clase
    cuentaDeRaul.retirarDeCuenta(50)
    console.log(cuentaDeRaul);
    RTA: CuentaCorriente { numero: 0, saldo: 50, agencia: '' }

ATRIBUTO PRIVADO
    Se usa con # justo antes del nombre del atributo, informando de que se trata de un atributo privado al que no se debe acceder directamente desde fuera de la clase.

class Persona {
  #nombre = 'Edu';

  renombrar(nombre) {
    this.#nombre = nombre;
  }
}
Si ahora intentamos acceder directamente a un atributo definido como privado obtendremos un error, estando forzados a usar los métodos que proporcione la clase. Esto mejora la encapsulación de las clases, evitando que podamos modificar atributos privados desde fuera de la clase accidentalmente.

Los atributos solamente se podrás definir como privados cuando declares la clase y no en tiempo de ejecución.

Debes tener en cuenta de que esta sintaxis todavía se encuentra en fase experimental, por lo que todavía no se recomienda su uso.
https://www.neoguias.com/atributos-privados-clases-javascript/


MODULOS==> 
Se crean archivos para cada una de las clases
Se importan las clases en el index.js
Se exportan las clases desde los archivos q las contienen
en consola:
    npm init
        esto para inicializar y crear el archivo.json
        me pide algunos datos y al final yes
        me aparecera en archivos un .json
            "type": "module",



SET(encapsular)
Es una buena parctica usar get para garantizar que la asignacion de valores a los atributos sea siempre segura.

CONSTRUCTOR
Ellos inicializan los atributos.

ATRIBUTO ESTATICO- En este caso se uso para declarar para que sea de la clase en general